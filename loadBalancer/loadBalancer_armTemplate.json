{
    "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "RegionPrefix": {
            "type": "string",
            "metadata": {
                "description": "Specify the Region prefix that will be added to all Resource Group and Resource names."
            }
        },
        "LogWksRegionPrefix": {
            "type": "string",
            "metadata": {
                "description": "Specify the Region prefix that will be added to the Log Analytics Resource Group."
            }
        },
        "EnterprisePrefix": {
            "type": "string",
            "metadata": {
                "description": "Specify the enterpise prefix that will be added to all Resource Group and Resource names.."
            }
        },
        "EnvironmentPrefix": {
            "type": "string",
            "metadata": {
                "description": "Specify the environment prefix that will be added to all Resource Group and Resource names.."
            },
            "allowedValues": [
                "C",
                "D",
                "T",
                "L"
            ]
        },
        "SubscriptionOrdinalPrefix": {
            "type": "string",
            "metadata": {
                "description": "Specify the subscription ordinal prefix that will be added to all Resource Group and Resource names. For instance: S01"
            }
        },
        "applicationTag": {
            "type": "string",
            "metadata": {
                "description": "Application tag"
            }
        },
        "environmentTag": {
            "type": "string",
            "metadata": {
                "description": "Environment Resource Tag"
            },
            "allowedValues": [
                "Core",
                "Dev",
                "Test",
                "Lab"
            ]
        },
        "lbSKU": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "metadata": {
                "description": "Load Balancer SKU. Default: Basic"
            }
        },
        "lbFrontendType": {
            "type": "string",
            "defaultValue": "private",
            "allowedValues": [
                "private",
                "public"
            ],
            "metadata": {
                "description": "Load Balancer Frontend type. Default: Private"
            }
        },
        "vnetSubnet": {
            "type": "string",
            "metadata": {
                "description": "VNET Subnet to attach the Load Balancer private frontend to. Default to none for public frontend."
            },
            "defaultValue": ""
        },
        "staticPrivateIp": {
            "type": "string",
            "metadata": {
                "description": "Static frontend private IP. Default to none for public frontend or dynamic private frontend."
            },
            "defaultValue": ""
        },
        "privateIpAllocationMethod": {
            "type": "string",
            "defaultValue": "Dynamic",
            "allowedValues": [
                "Dynamic",
                "Static"
            ],
            "metadata": {
                "description": "Load Balancer Frontend Private IP Allocation Method. Default: Dynamic"
            }
        }, 
        "publicIPName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name of (existing) Public IP Address to attach to Load Balancer frontend. Defaults to none for private endpoint"
            }
        }
    },
    "variables": {
        "linkedTemplateContainerUri": "https://raw.githubusercontent.com/FabienGilbert/AzureHub/master/linkedTemplates",
        "leftPrefix": "[concat(parameters('EnterprisePrefix'), '-', parameters('RegionPrefix'), '-', parameters('EnvironmentPrefix'), '-')]",
        "netRgp": "[concat(variables('leftPrefix'),'NET-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
        "vnetName": "[concat(variables('leftPrefix'),'VNET-',parameters('SubscriptionOrdinalPrefix'),'-01')]",
        "lbName": "[concat(variables('leftPrefix'),'LB-',parameters('SubscriptionOrdinalPrefix'),parameters('lbIncrementPrefix'))]",
        "lbTags": {
            "Component": "[parameters('componentTag')]",
            "Application": "[parameters('applicationTag')]",
            "Environment": "[parameters('environmentTag')]"
        },
        "logRgp": "[concat(parameters('EnterprisePrefix'), '-', parameters('LogWksRegionPrefix'), '-', parameters('EnvironmentPrefix'), '-','LOG-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
        "logWksName": "[concat(parameters('EnterprisePrefix'), '-', parameters('LogWksRegionPrefix'), '-', parameters('EnvironmentPrefix'), '-','LOGWKS-',parameters('SubscriptionOrdinalPrefix'))]",
        "copy": [
            {
                "name": "securityRules",
                "count": "[length(parameters('securityRulesDefinition'))]",
                "input": {
                    "direction": "[parameters('securityRulesDefinition')[copyIndex('securityRules')].direction]",
                    "priority": "[parameters('securityRulesDefinition')[copyIndex('securityRules')].priority]",
                    "name": "[parameters('securityRulesDefinition')[copyIndex('securityRules')].name]",
                    "description": "[parameters('securityRulesDefinition')[copyIndex('securityRules')].description]",
                    "access": "[parameters('securityRulesDefinition')[copyIndex('securityRules')].access]",
                    "protocol": "[parameters('securityRulesDefinition')[copyIndex('securityRules')].protocol]",
                    "sourceAddressPrefixes": "[if(contains(parameters('securityRulesDefinition')[copyIndex('securityRules')].sourceAddressPrefixes,'parameter'), array(parameters(parameters('securityRulesDefinition')[copyIndex('securityRules')].sourceAddressPrefixes.parameter)), parameters('securityRulesDefinition')[copyIndex('securityRules')].sourceAddressPrefixes.value)]",
                    "destinationAddressPrefixes": "[if(contains(parameters('securityRulesDefinition')[copyIndex('securityRules')].destinationAddressPrefixes,'parameter'), array(parameters(parameters('securityRulesDefinition')[copyIndex('securityRules')].destinationAddressPrefixes.parameter)), parameters('securityRulesDefinition')[copyIndex('securityRules')].destinationAddressPrefixes.value)]",
                    "sourcePortRanges": "[parameters('securityRulesDefinition')[copyIndex('securityRules')].sourcePortRanges]",
                    "destinationPortRanges": "[parameters('securityRulesDefinition')[copyIndex('securityRules')].destinationPortRanges]"
                }
            },
            {
                "name": "deploymentSecurityRules",
                "count": "[length(variables('securityRules'))]",
                "input": {
                    "direction": "[variables('securityRules')[copyIndex('deploymentSecurityRules')].direction]",
                    "priority": "[variables('securityRules')[copyIndex('deploymentSecurityRules')].priority]",
                    "name": "[variables('securityRules')[copyIndex('deploymentSecurityRules')].name]",
                    "description": "[variables('securityRules')[copyIndex('deploymentSecurityRules')].description]",
                    "access": "[variables('securityRules')[copyIndex('deploymentSecurityRules')].access]",
                    "protocol": "[variables('securityRules')[copyIndex('deploymentSecurityRules')].protocol]",
                    "sourceAddressPrefix": "[if(equals(length(variables('securityRules')[copyIndex('deploymentSecurityRules')].sourceAddressPrefixes),1), variables('securityRules')[copyIndex('deploymentSecurityRules')].sourceAddressPrefixes[0], json('null'))]",
                    "sourceAddressPrefixes": "[if(greater(length(variables('securityRules')[copyIndex('deploymentSecurityRules')].sourceAddressPrefixes),1), variables('securityRules')[copyIndex('deploymentSecurityRules')].sourceAddressPrefixes, json('[]'))]",
                    "destinationAddressPrefix": "[if(equals(length(variables('securityRules')[copyIndex('deploymentSecurityRules')].destinationAddressPrefixes),1), variables('securityRules')[copyIndex('deploymentSecurityRules')].destinationAddressPrefixes[0], json('null'))]",
                    "destinationAddressPrefixes": "[if(greater(length(variables('securityRules')[copyIndex('deploymentSecurityRules')].destinationAddressPrefixes),1), variables('securityRules')[copyIndex('deploymentSecurityRules')].destinationAddressPrefixes, json('[]'))]",
                    "sourcePortRange": "[if(equals(length(variables('securityRules')[copyIndex('deploymentSecurityRules')].sourcePortRanges),1), variables('securityRules')[copyIndex('deploymentSecurityRules')].sourcePortRanges[0], json('null'))]",
                    "sourcePortRanges": "[if(greater(length(variables('securityRules')[copyIndex('deploymentSecurityRules')].sourcePortRanges),1), variables('securityRules')[copyIndex('deploymentSecurityRules')].sourcePortRanges, json('[]'))]",
                    "destinationPortRange": "[if(equals(length(variables('securityRules')[copyIndex('deploymentSecurityRules')].destinationPortRanges),1), variables('securityRules')[copyIndex('deploymentSecurityRules')].destinationPortRanges[0], json('null'))]",
                    "destinationPortRanges": "[if(greater(length(variables('securityRules')[copyIndex('deploymentSecurityRules')].destinationPortRanges),1), variables('securityRules')[copyIndex('deploymentSecurityRules')].destinationPortRanges, json('[]'))]"
                }
            }
        ]
    },
    "functions": [
        {
            "namespace": "lbfunc",
            "members": {
                "GetSubnetId": {
                    "parameters": [
                        {
                            "name": "VNETResourceGroup",
                            "type": "string"
                        },
                        {
                            "name": "VNETName",
                            "type": "string"
                        },
                        {
                            "name": "VNETSubnet",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "object",
                        "value": {
                            "id": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',parameters('VNETResourceGroup'),'/providers/Microsoft.Network/virtualNetworks/',parameters('VNETName'),'/subnets/',parameters('VNETSubnet'))]"
                        }
                    }
                },
                "GetResourceId": {
                    "parameters": [
                        {
                            "name": "ResourceGroup",
                            "type": "string"
                        },
                        {
                            "name": "Name",
                            "type": "string"
                        },
                        {
                            "name": "Type",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "object",
                        "value": {
                            "id": "[resourceId(parameters('ResourceGroup'), parameters('Type'), parameters('Name'))]"
                        }
                    }
                }
            }
        }
    ],
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat('lb_', variables('lbName'))]",
            "resourceGroup": "[variables('netRgp')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "apiVersion": "2020-07-01",
                            "name": "[variables('lbName')]",
                            "type": "Microsoft.Network/loadBalancers",
                            "location": "[resourceGroup().location]",
                            "tags": "[variables('lbTags')]",
                            "sku": {
                                "name": "[parameters('lbSKU')]"
                            },
                            "properties": {
                                "copy": [
                                    {
                                        "name": "backendAddressPools",
                                        "count": "[length(parameters('lbBackendPools'))]",
                                        "input": {
                                            "name": "[parameters('lbBackendPools')[copyIndex('backendAddressPools')]]"
                                        }
                                    },
                                    {
                                        "name": "probes",
                                        "count": "[length(parameters('lbProbes'))]",
                                        "input": {
                                            "name": "[parameters('lbProbes')[copyIndex('probes')].Name]",
                                            "properties": {
                                                "protocol": "[parameters('lbProbes')[copyIndex('probes')].Protocol]",
                                                "port": "[parameters('lbProbes')[copyIndex('probes')].Port]",
                                                "intervalInSeconds": "5",
                                                "numberOfProbes": "2"
                                            }
                                        }
                                    },
                                    {
                                        "name": "loadBalancingRules",
                                        "count": "[length(parameters('lbRules'))]",
                                        "input": {
                                            "name": "[parameters('lbRules')[copyIndex('loadBalancingRules')].Name]",
                                            "properties": {
                                                "frontendIPConfiguration": {
                                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('lbName')), '/frontendIpConfigurations/', parameters('lbRules')[copyIndex('loadBalancingRules')].FrontEndPool)]"
                                                },
                                                "backendAddressPool": {
                                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('lbName')), '/backendAddressPools/', parameters('lbRules')[copyIndex('loadBalancingRules')].BackEndPool)]"
                                                },
                                                "probe": {
                                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('lbName')), '/probes/', parameters('lbRules')[copyIndex('loadBalancingRules')].Probe)]"
                                                },
                                                "protocol": "[parameters('lbRules')[copyIndex('loadBalancingRules')].Protocol]",
                                                "frontendPort": "[parameters('lbRules')[copyIndex('loadBalancingRules')].FrontendPort]",
                                                "backendPort": "[parameters('lbRules')[copyIndex('loadBalancingRules')].BackendPort]",
                                                "idleTimeoutInMinutes": "[parameters('lbRules')[copyIndex('loadBalancingRules')].IdleTimeout]",
                                                "DisableOutboundSNAT": "[parameters('lbRules')[copyIndex('loadBalancingRules')].DisableOutboundSNAT]"
                                            }
                                        }
                                    }
                                ],
                                "frontendIPConfigurations": [
                                    {
                                        "id": "string",
                                        "properties": {
                                            "subnet": "[if(equals(parameters('lbFrontendType'), 'private'), lbfunc.GetSubnetId(variables('netRgp'),variables('vnetName'),parameters('vnetSubnet')), json('null'))]",
                                            "privateIPAddress": "[if(equals(parameters('lbFrontendType'), 'private'),parameters('staticPrivateIp'), json('null'))]",
                                            "privateIPAllocationMethod": "[if(equals(parameters('lbFrontendType'), 'private'),parameters('privateIpAllocationMethod'), json('null'))]",
                                            "publicIPAddress": "[if(equals(parameters('lbFrontendType'), 'public'), lbfunc.GetResourceId(variables('netRgp'),parameters('publicIPName'),'Microsoft.Network/publicIPAddresses'), json('null'))]"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }
    ]
}