{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Vault"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "SKU for the vault"
      }
    },
    "enableVaultForDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies if the vault is enabled for a VM deployment"
      }
    },
    "enableVaultForDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
      }
    },
    "enabledForTemplateDeployment": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      }
    },
    "enableSoftDelete": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether to enable the Soft Delete feature."
      }
    },
    "enablePurgeProtection": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "Specifies whether to enable the Purge Protection feature."
      }
    },
    "accessPolicies": {
      "type": "array",
      "metadata": {
        "description": "Key Vault Access Policies"
      }
    },
    "networkAclDefaultAction": {
      "type": "string",
      "defaultValue": "allow",
      "allowedValues": [
        "allow",
        "deny"
      ]
    },
    "virtualNetworkAcls": {
      "type": "array",
      "defaultValue": []
    },
    "networkAclSourceIpAddresses": {
      "type": "array",
      "defaultValue": []
    },
    "networkAclBypass": {
      "type": "string",
      "defaultValue": "AzureServices",
      "allowedValues": [
        "None",
        "AzureServices"
      ]
    },
    "logAnalyticsWorkspaceSubscription": {
      "type": "string",
      "metadata": {
        "description": "Subscription ID of the Log Analytics Workspace the diagnostics logs get sent to"
      },
      "defaultValue": "[subscription().subscriptionId]"
    },
    "logAnalyticsWorkspaceResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource Group of the Log Analytics Workspace the diagnostics logs get sent to"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "metadata": {
        "description": "Name Group of the Log Analytics Workspace the diagnostics logs get sent to"
      }
    },
    "logAuditEvent": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether or not audit events get shipped to the Log Analytics Workspace"
      }
    },
    "allMetrics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether or not all VNET metrics get shipped to the Log Analytics Workspace"
      }
    },
    "tags": {
      "type": "object"
    }
  },
  "variables": {
    "copy": [
      {
        "name": "virtualNetworkRules",
        "count": "[if(equals(parameters('virtualNetworkAcls'),json('[]')), 1, length(parameters('virtualNetworkAcls')))]",
        "input": {
          "id": "[if(equals(parameters('virtualNetworkAcls'),json('[]')), json('null'), concat('/subscriptions/',parameters('virtualNetworkAcls')[copyIndex('virtualNetworkRules')].VnetSubscriptionId,'/resourceGroups/',parameters('virtualNetworkAcls')[copyIndex('virtualNetworkRules')].VnetResourceGroup,'/providers/Microsoft.Network/virtualNetworks/',parameters('virtualNetworkAcls')[copyIndex('virtualNetworkRules')].VnetName,'/subnets/',parameters('virtualNetworkAcls')[copyIndex('virtualNetworkRules')].VnetSubnet))]",
          "action": "[if(equals(parameters('virtualNetworkAcls'),json('[]')), json('null'), parameters('virtualNetworkAcls')[copyIndex('virtualNetworkRules')].action)]"
        }
      },
      {
        "name": "ipRules",
        "count": "[if(equals(parameters('networkAclSourceIpAddresses'),json('[]')), 1, length(parameters('networkAclSourceIpAddresses')))]",
        "input": {
          "value": "[if(equals(parameters('networkAclSourceIpAddresses'),json('[]')), json('null'), parameters('networkAclSourceIpAddresses')[copyIndex('ipRules')])]",
          "action": "[if(equals(parameters('networkAclSourceIpAddresses'),json('[]')), json('null'), 'Allow')]"
        }
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[parameters('keyVaultName')]",
      "apiVersion": "2019-09-01",
      "location": "[resourceGroup().location]",
      "tags": "[parameters('tags')]",
      "properties": {
        "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
        "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
        "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
        "enableSoftDelete": "[parameters('enableSoftDelete')]",
        "enablePurgeProtection": "[parameters('enablePurgeProtection')]",
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "name": "[parameters('skuName')]",
          "family": "A"
        },
        "accessPolicies": "[parameters('accessPolicies')]",
        "networkAcls": {
          "virtualNetworkRules": "[if(equals(parameters('virtualNetworkAcls'),json('[]')), json('null'), variables('virtualNetworkRules'))]",
          "ipRules": "[if(equals(parameters('networkAclSourceIpAddresses'),json('[]')), json('null'), variables('ipRules'))]",
          "bypass": "[parameters('networkAclBypass')]",
          "defaultAction": "[parameters('networkAclDefaultAction')]"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/providers/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "name": "[concat(parameters('keyVaultName'),'/microsoft.insights/eventsToLogAnalytics')]",
      "dependsOn": [
        "[parameters('keyVaultName')]"
      ],
      "properties": {
        "workspaceId": "[resourceId(parameters('logAnalyticsWorkspaceSubscription'), parameters('logAnalyticsWorkspaceResourceGroup'), 'microsoft.operationalinsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
        "logs": [
          {
            "category": "AuditEvent",
            "enabled": "[parameters('logAuditEvent')]"
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": "[parameters('allMetrics')]"
          }
        ]
      }
    }
  ]
}