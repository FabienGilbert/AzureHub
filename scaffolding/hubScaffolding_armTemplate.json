{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "tenantId": {
      "type": "string",
      "metadata": {
        "description": "Specify the Azure AD Tenant ID."
      }
    },
    "subscriptionId": {
      "type": "string",
      "metadata": {
        "description": "Specify the Hub subscription ID."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Specify the location for the deployment, resource group and resources."
      }
    },
    "logWkslocation": {
      "type": "string",
      "metadata": {
        "description": "Specify the location for the Log Analytics Workspace"
      }
    },
    "RegionPrefix": {
      "type": "string",
      "metadata": {
        "description": "Specify the Region prefix that will be added to all Resource Group and Resource names."
      }
    },
    "LogWksRegionPrefix": {
      "type": "string",
      "metadata": {
        "description": "Specify the Region prefix that will be added to the Log Analytics Resource Group."
      }
    },
    "EnterprisePrefix": {
      "type": "string",
      "metadata": {
        "description": "Specify the enterpise prefix that will be added to all Resource Group and Resource names.."
      }
    },
    "EnvironmentPrefix": {
      "type": "string",
      "metadata": {
        "description": "Specify the environment prefix that will be added to all Resource Group and Resource names.."
      },
      "allowedValues": [
        "C",
        "D",
        "T",
        "L"
      ]
    },
    "SubscriptionOrdinalPrefix": {
      "type": "string",
      "metadata": {
        "description": "Specify the subscription ordinal prefix that will be added to all Resource Group and Resource names. For instance: S01"
      }
    },
    "addressPrefixes": {
      "type": "array",
      "metadata": {
        "description": "Address Prefixes that will be configured into the VNET."
      }
    },
    "subnetPrefixAG": {
      "type": "string",
      "metadata": {
        "description": "AppGateway VNET subnet prefix."
      }
    },
    "subnetPrefixAP": {
      "type": "string",
      "metadata": {
        "description": "App VNET subnet prefix."
      }
    },
    "subnetPrefixDS": {
      "type": "string",
      "metadata": {
        "description": "AD Domain Services VNET subnet prefix."
      }
    },
    "subnetPrefixFS": {
      "type": "string",
      "metadata": {
        "description": "AD Federation Services VNET subnet prefix."
      }
    },
    "subnetPrefixFW": {
      "type": "string",
      "metadata": {
        "description": "Azure Firewall VNET subnet prefix."
      }
    },
    "subnetPrefixJP": {
      "type": "string",
      "metadata": {
        "description": "Jump server VNET subnet prefix."
      }
    },
    "subnetPrefixRP": {
      "type": "string",
      "metadata": {
        "description": "Web Application Proxy VNET subnet prefix."
      }
    },
    "subnetPrefixVG": {
      "type": "string",
      "metadata": {
        "description": "VNET Gateway subnet prefix."
      }
    },
    "dnsServers": {
      "type": "array",
      "metadata": {
        "description": "DNS Servers that will be configured in the VNET."
      }
    },
    "keyVaultFullAccessGroupId": {
      "type": "string",
      "metadata": {
        "description": "Azure AD Group Id for full access Key Vault access policy"
      }
    },
    "keyVaultReadOnlyAccessGroupId": {
      "type": "string",
      "metadata": {
        "description": "Azure AD Group Id for read-only Key Vault access policy"
      }
    },
    "allowedOnPremsPublicIps": {
      "type": "array",
      "metadata": {
        "description": "On-premises Public IP Addresses allowed to connect through resources' firewall"
      },
      "defaultValue": []
    },
    "logAnalyticsTier": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics Workspace Tier"
      },
      "allowedValues": [
        "Free",
        "Standard",
        "Premium",
        "PerNode",
        "PerGB2018",
        "Standalone",
        "CapacityReservation"
      ],
      "defaultValue": "Free"
    },
    "logAnalyticsRetention": {
      "type": "int",
      "metadata": {
        "description": "Log Analytics Workspace Retention"
      },
      "defaultValue": 7
    },
    "applicationTag": {
      "type": "string",
      "metadata": {
        "description": "Application tag"
      }
    },
    "environmentTag": {
      "type": "string",
      "metadata": {
        "description": "Environment Resource Tag"
      },
      "allowedValues": [
        "Core",
        "Dev",
        "Test",
        "Lab"
      ]
    },
    "deployRgp": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Resource Groups"
      }
    },
    "deployLws": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Log Analytics Workspace"
      }
    },    
    "deployUdr": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy User Defined Routes"
      }
    },    
    "deployNsg": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Network Security Groups"
      }
    },    
    "deployVnt": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Virtual Network"
      }
    },    
    "deployAkv": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Key Vaults"
      }
    },    
    "deploySta": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Storage Accounts"
      }
    },   
    "deployNsf": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy NSG Flow Logs"
      }
    },  
    "deployAua": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Automation Account"
      }
    },
    "deployPip": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Public IP Prefix"
      }
    },    
    "deployPia": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Public IP Addresses"
      }
    },      
    "deployAfw": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Deploy Azure Firewall"
      }
    }
  },
  "variables": {
    "linkedTemplateContainerUri": "https://raw.githubusercontent.com/FabienGilbert/AzureHub/master/linkedTemplates",
    "leftPrefix": "[concat(parameters('EnterprisePrefix'), '-', parameters('RegionPrefix'), '-', parameters('EnvironmentPrefix'), '-')]",
    "nsgRgp": "[concat(variables('leftPrefix'),'NSG-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
    "netRgp": "[concat(variables('leftPrefix'),'NET-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
    "akvRgp": "[concat(variables('leftPrefix'),'AKV-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
    "logRgp": "[concat(parameters('EnterprisePrefix'), '-', parameters('LogWksRegionPrefix'), '-', parameters('EnvironmentPrefix'), '-','LOG-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
    "autoRgp": "[concat(variables('leftPrefix'),'AUTO-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
    "addsRgp": "[concat(variables('leftPrefix'),'ADDS-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
    "adfsRgp": "[concat(variables('leftPrefix'),'ADFS-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
    "jumpRgp": "[concat(variables('leftPrefix'),'JUMP-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
    "dnsRgp": "[concat(variables('leftPrefix'),'DNS-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
    "funcRgp": "[concat(variables('leftPrefix'),'FUNC-RGP-',parameters('SubscriptionOrdinalPrefix'))]",
    "resourceGroups": [
      {
        "name": "[variables('nsgRgp')]",
        "location": "[parameters('location')]",
        "tags": {
          "Component": "Resource Group for Network Security Groups",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      },
      {
        "name": "[variables('netRgp')]",
        "location": "[parameters('location')]",
        "tags": {
          "Component": "Resource Group for Network-related resources",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      },
      {
        "name": "[variables('akvRgp')]",
        "location": "[parameters('location')]",
        "tags": {
          "Component": "Resource Group for Key Vaults",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      },
      {
        "name": "[variables('logRgp')]",
        "location": "[parameters('logWkslocation')]",
        "tags": {
          "Component": "Resource Group for Log Analytics-related resources",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      },
      {
        "name": "[variables('autoRgp')]",
        "location": "[parameters('location')]",
        "tags": {
          "Component": "Resource Group for Automation-related resources",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      },
      {
        "name": "[variables('addsRgp')]",
        "location": "[parameters('location')]",
        "tags": {
          "Component": "Resource Group for Active Directory Domain Services-related resources",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      },
      {
        "name": "[variables('adfsRgp')]",
        "location": "[parameters('location')]",
        "tags": {
          "Component": "Resource Group for Active Directory Federation Services-related resources",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      },
      {
        "name": "[variables('jumpRgp')]",
        "location": "[parameters('location')]",
        "tags": {
          "Component": "Resource Group for jump servers",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      },
      {
        "name": "[variables('dnsRgp')]",
        "location": "[parameters('location')]",
        "tags": {
          "Component": "Resource Group for DNS zones",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      },
      {
        "name": "[variables('funcRgp')]",
        "location": "[parameters('location')]",
        "tags": {
          "Component": "Resource Group for Azure Functions",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      }
    ],
    "logWksName": "[concat(parameters('EnterprisePrefix'), '-', parameters('LogWksRegionPrefix'), '-', parameters('EnvironmentPrefix'), '-','LOGWKS-',parameters('SubscriptionOrdinalPrefix'))]",
    "automationAccountName": "[concat(variables('leftPrefix'),'AUTO-',parameters('SubscriptionOrdinalPrefix'))]",
    "nsgStoreName": "[concat(toLower(parameters('EnterprisePrefix')), toLower(parameters('RegionPrefix')), toLower(parameters('EnvironmentPrefix')), 'nsgstor', toLower(parameters('SubscriptionOrdinalPrefix')), '01')]",
    "firewallName": "[concat(variables('leftPrefix'),'FW-',parameters('SubscriptionOrdinalPrefix'))]",
    "firewallSubnetName": "AzureFirewallSubnet",
    "firewallIpName": "[concat(variables('leftPrefix'),'IP-',parameters('SubscriptionOrdinalPrefix'),'-01')]",
    "addsSubnetName": "[concat(variables('leftPrefix'), 'SNT-DS-', replace(parameters('subnetPrefixDS'), '/', '_'))]",
    "jumpSubnetName": "[concat(variables('leftPrefix'), 'SNT-JP-', replace(parameters('subnetPrefixJP'), '/', '_'))]",
    "adfsSubnetName": "[concat(variables('leftPrefix'), 'SNT-FS-', replace(parameters('subnetPrefixFS'), '/', '_'))]",
    "appSubnetName": "[concat(variables('leftPrefix'), 'SNT-AP-', replace(parameters('subnetPrefixAP'), '/', '_'))]",
    "wapSubnetName": "[concat(variables('leftPrefix'), 'SNT-RP-', replace(parameters('subnetPrefixRP'), '/', '_'))]",
    "subnets": [
      {
        "name": "GatewaySubnet",
        "ipPrefix": "[parameters('subnetPrefixVG')]",
        "nsgUdr": false,
        "serviceEndpoints": false
      },
      {
        "name": "AppGatewaySubnet",
        "ipPrefix": "[parameters('subnetPrefixAG')]",
        "nsgUdr": false,
        "serviceEndpoints": false
      },
      {
        "name": "[variables('firewallSubnetName')]",
        "ipPrefix": "[parameters('subnetPrefixFW')]",
        "nsgUdr": false,
        "serviceEndpoints": false
      },
      {
        "name": "[variables('addsSubnetName')]",
        "ipPrefix": "[parameters('subnetPrefixDS')]",
        "nsgUdr": true,
        "serviceEndpoints": true
      },
      {
        "name": "[variables('adfsSubnetName')]",
        "ipPrefix": "[parameters('subnetPrefixFS')]",
        "nsgUdr": true,
        "serviceEndpoints": true
      },
      {
        "name": "[variables('wapSubnetName')]",
        "ipPrefix": "[parameters('subnetPrefixRP')]",
        "nsgUdr": true,
        "serviceEndpoints": true
      },
      {
        "name": "[variables('jumpSubnetName')]",
        "ipPrefix": "[parameters('subnetPrefixJP')]",
        "nsgUdr": true,
        "serviceEndpoints": true
      },
      {
        "name": "[variables('appSubnetName')]",
        "ipPrefix": "[parameters('subnetPrefixAP')]",
        "nsgUdr": true,
        "serviceEndpoints": true
      }
    ],
    "copy": [
      {
        "name": "vnetSubnets",
        "count": "[length(variables('subnets'))]",
        "input": {
          "SubnetName": "[variables('subnets')[copyIndex('vnetSubnets')].name]",
          "addressPrefix": "[variables('subnets')[copyIndex('vnetSubnets')].ipPrefix]",
          "NsgResourceGroup": "[if(equals(variables('subnets')[copyIndex('vnetSubnets')].nsgUdr, json('true')), variables('nsgRgp'),'')]",
          "NsgName": "[if(equals(variables('subnets')[copyIndex('vnetSubnets')].nsgUdr, json('true')), concat(variables('subnets')[copyIndex('vnetSubnets')].name, '-NSG'),'')]",
          "UdrResourceGroup": "[if(equals(variables('subnets')[copyIndex('vnetSubnets')].nsgUdr, json('true')), variables('netRgp'),'')]",
          "UdrName": "[if(equals(variables('subnets')[copyIndex('vnetSubnets')].nsgUdr, json('true')), concat(variables('subnets')[copyIndex('vnetSubnets')].name, '-UDR'),'')]",
          "serviceEndpoints": "[if(equals(variables('subnets')[copyIndex('vnetSubnets')].serviceEndpoints, json('true')), variables('serviceEndpoints'),'')]"
        }
      }
    ],
    "serviceEndpoints": [
      {
        "service": "Microsoft.Storage"
      },
      {
        "service": "Microsoft.Keyvault"
      }
    ],
    "vnetName": "[concat(variables('leftPrefix'),'VNET-',parameters('SubscriptionOrdinalPrefix'),'-01')]",
    "virtualNetworkAcls": [
      {
        "VnetSubscriptionId": "[parameters('subscriptionId')]",
        "VnetResourceGroup": "[variables('netRgp')]",
        "VnetName": "[variables('vnetName')]",
        "VnetSubnet": "[variables('adfsSubnetName')]",
        "action": "allow"
      },
      {
        "VnetSubscriptionId": "[parameters('subscriptionId')]",
        "VnetResourceGroup": "[variables('netRgp')]",
        "VnetName": "[variables('vnetName')]",
        "VnetSubnet": "[variables('addsSubnetName')]",
        "action": "allow"
      },
      {
        "VnetSubscriptionId": "[parameters('subscriptionId')]",
        "VnetResourceGroup": "[variables('netRgp')]",
        "VnetName": "[variables('vnetName')]",
        "VnetSubnet": "[variables('jumpSubnetName')]",
        "action": "allow"
      },
      {
        "VnetSubscriptionId": "[parameters('subscriptionId')]",
        "VnetResourceGroup": "[variables('netRgp')]",
        "VnetName": "[variables('vnetName')]",
        "VnetSubnet": "[variables('wapSubnetName')]",
        "action": "allow"
      },
      {
        "VnetSubscriptionId": "[parameters('subscriptionId')]",
        "VnetResourceGroup": "[variables('netRgp')]",
        "VnetName": "[variables('vnetName')]",
        "VnetSubnet": "[variables('appSubnetName')]",
        "action": "allow"
      }
    ],
    "keyVaultAccessPolicy": [
      {
        "comments": "Full Access Group",
        "tenantId": "[parameters('tenantId')]",
        "objectId": "[parameters('keyVaultFullAccessGroupId')]",
        "permissions": {
          "keys": [
            "all"
          ],
          "secrets": [
            "all"
          ],
          "certificates": [
            "all"
          ]
        }
      },
      {
        "comments": "Read-Only Access Group",
        "tenantId": "[parameters('tenantId')]",
        "objectId": "[parameters('keyVaultReadOnlyAccessGroupId')]",
        "permissions": {
          "keys": [
            "WrapKey",
            "UnwrapKey",
            "Get",
            "List"
          ],
          "secrets": [
            "Get",
            "List"
          ],
          "certificates": [
            "Get",
            "List"
          ]
        }
      },
      {
        "comments": "Backup Management Service",
        "tenantId": "[parameters('tenantId')]",
        "objectId": "54778c7d-c234-4db5-8d56-b3026641e834",
        "permissions": {
          "keys": [
            "Get",
            "List",
            "Backup",
            "Restore"
          ],
          "secrets": [
            "Get",
            "List",
            "Backup",
            "Restore"
          ],
          "certificates": []
        }
      }
    ],
    "keyVaults": [
      {
        "name": "[concat(variables('leftPrefix'),'AKV-',parameters('SubscriptionOrdinalPrefix'),'-01')]",
        "enableVaultForDeployment": true,
        "enableVaultForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "networkAclDefaultAction": "deny",
        "virtualNetworkAcls": "[variables('virtualNetworkAcls')]",
        "tags": {
          "Component": "Key Vault for deployment passwords, encryption keys and SSL certificates",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      }
    ],
    "storageAccounts": [
      {
        "resourceGroup": "[variables('autoRgp')]",
        "name": "[concat(toLower(parameters('EnterprisePrefix')), toLower(parameters('RegionPrefix')), toLower(parameters('EnvironmentPrefix')), 'autostor', toLower(parameters('SubscriptionOrdinalPrefix')), '01')]",
        "sku": "Standard_LRS",
        "tier": "Cool",
        "networkAclDefaultAction": "allow",
        "virtualNetworkAcls": [],
        "tags": {
          "Component": "Storage account for linked ARM templates and deployment config files",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      },
      {
        "resourceGroup": "[variables('nsgRgp')]",
        "name": "[variables('nsgStoreName')]",
        "sku": "Standard_LRS",
        "tier": "Cool",
        "networkAclDefaultAction": "deny",
        "virtualNetworkAcls": "[variables('virtualNetworkAcls')]",
        "tags": {
          "Component": "Storage account for NSG Flow Logs",
          "Application": "[parameters('applicationTag')]",
          "Environment": "[parameters('environmentTag')]"
        }
      }
    ],
    "publicIpZone": [ "1" ],
    "publicIpPrefixName": "[concat(variables('leftPrefix'),'IPPRFX-',parameters('SubscriptionOrdinalPrefix'),'-01')]",
    "publicIpPrefixSize": 30,
    "publicIpAddresses": [
      {
        "name": "[variables('firewallIpName')]",
        "domainLabel": "[concat(toLower(parameters('EnterprisePrefix')), toLower(parameters('RegionPrefix')), toLower(parameters('EnvironmentPrefix')), 'publicip01')]",
        "componentTag": "Public IP address for Azure Firewall"
      },
      {
        "name": "[concat(variables('leftPrefix'),'IP-',parameters('SubscriptionOrdinalPrefix'),'-02')]",
        "domainLabel": "[concat(toLower(parameters('EnterprisePrefix')), toLower(parameters('RegionPrefix')), toLower(parameters('EnvironmentPrefix')), 'publicip02')]",
        "componentTag": "Public IP address for WAP servers"
      },
      {
        "name": "[concat(variables('leftPrefix'),'IP-',parameters('SubscriptionOrdinalPrefix'),'-03')]",
        "domainLabel": "[concat(toLower(parameters('EnterprisePrefix')), toLower(parameters('RegionPrefix')), toLower(parameters('EnvironmentPrefix')), 'publicip03')]",
        "componentTag": "Public IP address"
      },
      {
        "name": "[concat(variables('leftPrefix'),'IP-',parameters('SubscriptionOrdinalPrefix'),'-04')]",
        "domainLabel": "[concat(toLower(parameters('EnterprisePrefix')), toLower(parameters('RegionPrefix')), toLower(parameters('EnvironmentPrefix')), 'publicip04')]",
        "componentTag": "Public IP address"
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "name": "[variables('resourceGroups')[copyIndex('rgpLoop')].name]",
      "condition": "[parameters('deployRgp')]",
      "copy": {
        "name": "rgpLoop",
        "count": "[length(variables('resourceGroups'))]"
      },
      "apiVersion": "2020-06-01",
      "location": "[variables('resourceGroups')[copyIndex('rgpLoop')].location]",
      "tags": "[variables('resourceGroups')[copyIndex('rgpLoop')].tags]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('logWks_', variables('logWksName'))]",
      "condition": "[parameters('deployLws')]",
      "dependsOn": [
        "rgpLoop"
      ],
      "resourceGroup": "[variables('logRgp')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('linkedTemplateContainerUri'), '/logAnalyticsWorkspace_armTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "workspaceName": {
            "value": "[variables('logWksName')]"
          },
          "serviceTier": {
            "value": "[parameters('logAnalyticsTier')]"
          },
          "dataRetention": {
            "value": "[parameters('logAnalyticsRetention')]"
          },
          "tags": {
            "value": {
              "Component": "Log Analytics Workspace",
              "Application": "[parameters('applicationTag')]",
              "Environment": "[parameters('environmentTag')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('hubUdr_', variables('subnets')[copyIndex('udrLoop')].name)]",
      "condition": "[and(equals(variables('subnets')[copyIndex('udrLoop')].nsgUdr, json('true')), parameters('deployUdr'))]",
      "dependsOn": [
        "rgpLoop"
      ],
      "copy": {
        "name": "udrLoop",
        "count": "[length(variables('subnets'))]"
      },
      "resourceGroup": "[variables('netRgp')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('linkedTemplateContainerUri'), '/udr_armTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "routeTableName": {
            "value": "[concat(variables('subnets')[copyIndex('udrLoop')].name, '-UDR')]"
          },
          "tags": {
            "value": {
              "Component": "Route Table",
              "Application": "[parameters('applicationTag')]",
              "Environment": "[parameters('environmentTag')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('hubNsg_', variables('subnets')[copyIndex('nsgLoop')].name)]",
      "condition": "[and(equals(variables('subnets')[copyIndex('nsgLoop')].nsgUdr, json('true')), parameters('deployNsg'))]",
      "dependsOn": [
        "[concat('logWks_', variables('logWksName'))]"
      ],
      "copy": {
        "name": "nsgLoop",
        "count": "[length(variables('subnets'))]"
      },
      "resourceGroup": "[variables('nsgRgp')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('linkedTemplateContainerUri'), '/nsg_armTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "networkSecurityGroupName": {
            "value": "[concat(variables('subnets')[copyIndex('nsgLoop')].name, '-NSG')]"
          },
          "logAnalyticsWorkspaceResourceGroup": {
            "value": "[variables('logRgp')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[variables('logWksName')]"
          },
          "tags": {
            "value": {
              "Component": "Network Security Group",
              "Application": "[parameters('applicationTag')]",
              "Environment": "[parameters('environmentTag')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('hubVnet_', variables('vnetName'))]",
      "condition": "[parameters('deployVnt')]",
      "resourceGroup": "[variables('netRgp')]",
      "dependsOn": [
        "udrLoop",
        "nsgLoop"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('linkedTemplateContainerUri'), '/vnet_armTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "addressPrefixes": {
            "value": "[parameters('addressPrefixes')]"
          },
          "subnets": {
            "value": "[variables('vnetSubnets')]"
          },
          "dnsServers": {
            "value": "[parameters('dnsServers')]"
          },
          "logAnalyticsWorkspaceResourceGroup": {
            "value": "[variables('logRgp')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[variables('logWksName')]"
          },
          "tags": {
            "value": {
              "Component": "Virtual Network",
              "Application": "[parameters('applicationTag')]",
              "Environment": "[parameters('environmentTag')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('keyVault_', variables('keyVaults')[copyIndex('keyVaultLoop')].name)]",
      "condition": "[parameters('deployAkv')]",
      "dependsOn": [
        "[concat('hubVnet_', variables('vnetName'))]"
      ],
      "copy": {
        "name": "keyVaultLoop",
        "count": "[length(variables('keyVaults'))]"
      },
      "resourceGroup": "[variables('akvRgp')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('linkedTemplateContainerUri'), '/keyVault_armTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[variables('keyVaults')[copyIndex('keyVaultLoop')].name]"
          },
          "enableVaultForDeployment": {
            "value": "[variables('keyVaults')[copyIndex('keyVaultLoop')].enableVaultForDeployment]"
          },
          "enableVaultForDiskEncryption": {
            "value": "[variables('keyVaults')[copyIndex('keyVaultLoop')].enableVaultForDiskEncryption]"
          },
          "enabledForTemplateDeployment": {
            "value": "[variables('keyVaults')[copyIndex('keyVaultLoop')].enabledForTemplateDeployment]"
          },
          "accessPolicies": {
            "value": "[variables('keyVaultAccessPolicy')]"
          },
          "networkAclDefaultAction": {
            "value": "[variables('keyVaults')[copyIndex('keyVaultLoop')].networkAclDefaultAction]"
          },
          "virtualNetworkAcls": {
            "value": "[variables('keyVaults')[copyIndex('keyVaultLoop')].virtualNetworkAcls]"
          },
          "networkAclSourceIpAddresses": {
            "value": "[parameters('allowedOnPremsPublicIps')]"
          },
          "logAnalyticsWorkspaceResourceGroup": {
            "value": "[variables('logRgp')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[variables('logWksName')]"
          },
          "tags": {
            "value": "[variables('keyVaults')[copyIndex('keyVaultLoop')].tags]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('storageAccount_', variables('storageAccounts')[copyIndex('storeLoop')].name)]",
      "condition": "[parameters('deploySta')]",
      "dependsOn": [
        "[concat('hubVnet_', variables('vnetName'))]"
      ],
      "copy": {
        "name": "storeLoop",
        "count": "[length(variables('storageAccounts'))]"
      },
      "resourceGroup": "[variables('storageAccounts')[copyIndex('storeLoop')].resourceGroup]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('linkedTemplateContainerUri'), '/storageAccount_armTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "StorageAccountName": {
            "value": "[variables('storageAccounts')[copyIndex('storeLoop')].name]"
          },
          "StorageAccountTier": {
            "value": "[variables('storageAccounts')[copyIndex('storeLoop')].tier]"
          },
          "StorageAccountSku": {
            "value": "[variables('storageAccounts')[copyIndex('storeLoop')].sku]"
          },
          "networkAclDefaultAction": {
            "value": "[variables('storageAccounts')[copyIndex('storeLoop')].networkAclDefaultAction]"
          },
          "virtualNetworkAcls": {
            "value": "[variables('storageAccounts')[copyIndex('storeLoop')].virtualNetworkAcls]"
          },
          "networkAclSourceIpAddresses": {
            "value": "[parameters('allowedOnPremsPublicIps')]"
          },
          "tags": {
            "value": "[variables('storageAccounts')[copyIndex('storeLoop')].tags]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('hubNsgFlowLog_', variables('subnets')[copyIndex('nsgFlowLogLoop')].name)]",
      "condition": "[and(equals(variables('subnets')[copyIndex('nsgFlowLogLoop')].nsgUdr, json('true')), parameters('deployNsf'))]",
      "dependsOn": [
        "storeLoop"
      ],
      "copy": {
        "name": "nsgFlowLogLoop",
        "count": "[length(variables('subnets'))]"
      },
      "resourceGroup": "NetworkWatcherRG",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('linkedTemplateContainerUri'), '/nsgFlowLog_armTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "nsgRgp": {
            "value": "[variables('nsgRgp')]"
          },
          "nsgName": {
            "value": "[concat(variables('subnets')[copyIndex('nsgFlowLogLoop')].name, '-NSG')]"
          },
          "storeName": {
            "value": "[variables('nsgStoreName')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('automationAccount_', variables('automationAccountName'))]",
      "condition": "[parameters('deployAua')]",
      "dependsOn": [
        "[concat('logWks_', variables('logWksName'))]"
      ],
      "resourceGroup": "[variables('autoRgp')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('linkedTemplateContainerUri'), '/automationAccount_armTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "automationAccountName": {
            "value": "[variables('automationAccountName')]"
          },
          "logAnalyticsWorkspaceRgp": {
            "value": "[variables('logRgp')]"
          },
          "logAnalyticsWorkspacelocation": {
            "value": "[parameters('logWkslocation')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[variables('logWksName')]"
          },
          "tags": {
            "value": {
              "Component": "Automation Account",
              "Application": "[parameters('applicationTag')]",
              "Environment": "[parameters('environmentTag')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('publicIpPrefix_', variables('publicIpPrefixName'))]",
      "condition": "[parameters('deployPip')]",
      "dependsOn": [
        "rgpLoop"
      ],
      "resourceGroup": "[variables('netRgp')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('linkedTemplateContainerUri'), '/publicIpPrefix_armTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "ipPrefixName": {
            "value": "[variables('publicIpPrefixName')]"
          },
          "prefixLength": {
            "value": "[variables('publicIpPrefixSize')]"
          },
          "zones": {
            "value": "[variables('publicIpZone')]"
          },
          "tags": {
            "value": {
              "Component": "Public IP Address Prefix",
              "Application": "[parameters('applicationTag')]",
              "Environment": "[parameters('environmentTag')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('publicIpAddresses_', variables('publicIpAddresses')[copyIndex('publicIpLoop')].name)]",
      "condition": "[parameters('deployPia')]",
      "dependsOn": [
        "[concat('publicIpPrefix_', variables('publicIpPrefixName'))]"
      ],
      "copy": {
        "name": "publicIpLoop",
        "count": "[length(variables('publicIpAddresses'))]"
      },
      "resourceGroup": "[variables('netRgp')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('linkedTemplateContainerUri'), '/publicIpAddress_armTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "ipPrefixName": {
            "value": "[variables('publicIpPrefixName')]"
          },
          "publicIpAddressName": {
            "value": "[variables('publicIpAddresses')[copyIndex('publicIpLoop')].name]"
          },
          "publicIpAddressDomainLabel": {
            "value": "[variables('publicIpAddresses')[copyIndex('publicIpLoop')].domainLabel]"
          },
          "zones": {
            "value": "[variables('publicIpZone')]"
          },
          "tags": {
            "value": {
              "Component": "[variables('publicIpAddresses')[copyIndex('publicIpLoop')].componentTag]",
              "Application": "[parameters('applicationTag')]",
              "Environment": "[parameters('environmentTag')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "[concat('hubFirewall_', variables('firewallName'))]",
      "condition": "[parameters('deployAfw')]",
      "resourceGroup": "[variables('netRgp')]",
      "dependsOn": [
        "publicIpLoop"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('linkedTemplateContainerUri'), '/firewall_armTemplate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "azureFirewallName": {
            "value": "[variables('firewallName')]"
          },
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "firewallSubnet": {
            "value": "[variables('firewallSubnetName')]"
          },
          "publicIpName": {
            "value": "[variables('firewallIpName')]"
          },
          "tags": {
            "value": {
              "Component": "Azure Firewall",
              "Application": "[parameters('applicationTag')]",
              "Environment": "[parameters('environmentTag')]"
            }
          }
        }
      }
    }
  ]
}